<?php

namespace ApiBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserLoaderInterface
{
    public function loadUserByUsername($username)
    {
        return $this->createQueryBuilder('u')
            ->where('u.username = :username OR u.email = :email')
            ->setParameter('username', $username)
            ->setParameter('email', $username)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function loginByUsername($username, $password)
    {
        return $this->createQueryBuilder('u')
            ->where('u.username = :username OR u.email = :email')
            ->andWhere('u.password = :password')
            ->setParameter('username', $username)
            ->setParameter('email', $username)
            ->setParameter('password', $password)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function findAll()
    {
        return $this->findBy(array('isActive' => true), array('idIncrement' => 'DESC'));
    }

    public function findOneById($id)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT user
            FROM ApiBundle:UserProject user
            WHERE
            user.idIncrement = :id AND
            user.active = :active
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('active', 1);
        $query->setParameter('id', $id);

        return $query->getOneOrNullResult();
    }

    public function findOneByProfile($id, $profile)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT user, profile
            FROM ApiBundle:UserProject user
            INNER JOIN user.profile profile
            WHERE
            user.idIncrement= :id AND
            profile.name = :profile AND
            user.active = :active
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('active', 1);
        $query->setParameter('id', $id);
        $query->setParameter('profile', $profile);

        return $query->getOneOrNullResult();
    }

    public function findAllByProfile($profile)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT user, profile
            FROM ApiBundle:UserProject user
            INNER JOIN user.profile profile
            INNER JOIN profile.permission permission
            WHERE
            permission.alias = :profile AND
            user.active = :active
            ORDER BY user.idIncrement DESC
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('active', 1);
        $query->setParameter('profile', $profile);

        return $query->getResult();
    }

    public function findAllByRole($role)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT user, profile
            FROM ApiBundle:UserProject user
            INNER JOIN user.profile profile
            INNER JOIN profile.permission permission
            WHERE
            permission.groupPermission = :role AND
            user.active = :active
            ORDER BY user.idIncrement DESC
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('active', 1);
        $query->setParameter('role', str_replace('ROLE_','',$role));

        return $query->getResult();
    }

    public function findChildrenByFather($userId)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT user, userChildren
            FROM ApiBundle:UserProject user
            INNER JOIN user.user userChildren
            WHERE
            user.isActive = :active AND
            userChildren.idIncrement = :id
            ORDER BY user.idIncrement DESC
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('active', 1);
        $query->setParameter('id', $userId);

        return $query->getResult();
    }

}
